{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\666\\day04\\HTML5\\day01\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\666\\day04\\HTML5\\day01\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\666\\day04\\HTML5\\day01\\vue_app_00\\src\\components\\home\\ShopCart.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\666\\day04\\HTML5\\day01\\vue_app_00\\src\\components\\home\\ShopCart.vue","mtime":1552383849434},{"path":"C:\\Users\\Administrator\\Desktop\\666\\day04\\HTML5\\day01\\vue_app_00\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"C:\\Users\\Administrator\\Desktop\\666\\day04\\HTML5\\day01\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\Administrator\\Desktop\\666\\day04\\HTML5\\day01\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Toast } from \"mint-ui\";\nexport default {\n  data: function data() {\n    return {\n      list: [],\n      //购物车列表\n      allcb: false //全选的状态 默认是未选中false\n\n    };\n  },\n  created: function created() {\n    this.loadMore();\n  },\n  methods: {\n    //全选按钮\n    selectAll: function selectAll(e) {\n      //console.log(123);\n      //1.获取全选按钮选中状态\n      var rs = e.target.checked; //2:遍历数据所有元素\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          item.cb = rs;\n        } //3.item.cb = 全选状态\n        //4 修改全选框的状态\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      item.allcb = rs;\n    },\n    //1:当前购物车商品内容前添加复选框\n    //2:为复选框添加自定义属性id\n    //3:cart-footer 添加按钮 删除指定商品\n    //4:为按钮绑定时间获取选中商品id \"4,6,8\"\n    //修改复选框状态 选中 取消\n    modifyItem: function modifyItem(e) {\n      //1:获取当前元素选中状态 true  false\n      var rs = e.target.checked; //console.log(rs)\n      //2:当前元素在数组中下标\n\n      var i = e.target.dataset.i; //console.log(rs+\":\"+i);\n      //3.将状态赋值当前数组下标中对象cb值\n\n      this.list[i].cb = rs; //console.log(this.list);\n      //判断全选复选框状态  true false\n      //1.获取数组个数\n\n      var size1 = this.list.length; //console.log(list);\n      //2.计算数组中cb true 元素个数\n\n      var count = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (item.cb) {\n            count++;\n          }\n        } //console.log(size1+\":\"+count);\n        //3.数组个数==撤吧true 个数 [累加和]\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (size1 == count) {\n        this.allcb = true;\n      } else {\n        this.allcb = false;\n      } //4. 将allcb = true\n      //5. 否则allcb==false\n\n    },\n    //删除选中多个商品\n    delItem: function delItem() {\n      var _this = this;\n\n      //[{cb:true,id:1},{cb:true,id:3}]\n      //\"1,3\"\n      //1:创建空字符串\n      var html = \"\"; //2:遍历数据中元素\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n\n          //3:判断cb==true\n          if (item.cb) {\n            //4:保存id拼接字符串 \"1,6,7\"\n            html += item.id + \",\";\n          }\n        } //console.log(\"|\"+html+\"|\");\n        //return\n\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (html.length == 0) {\n        Toast(\"请选中你需要删除的商品\");\n        return;\n      } //5:截取字符串去除最后,  \"1,6,7\"\n      //substring(?,?)\n      //?截取起始下标\n      //?截取几个字符\n\n\n      html = html.substring(0, html.length - 1);\n      console.log(html); //6:发送ajax ids=1,6,7\n\n      var url = \"http://127.0.0.1:3000\";\n      url += \"/removeMItem?ids=\" + html;\n      this.axios.get(url).then(function (result) {\n        if (result.data.code == 1) {\n          Toast(\"删除成功\");\n\n          _this.loadMore();\n        } else {\n          Toast(\"删除失败\");\n        }\n      }); //7:获取返回数据提示  删除成功或失败\n    },\n    removeItem: function removeItem(e) {\n      var _this2 = this;\n\n      //1.获取购物车商品id\n      var id = e.target.dataset.id;\n      var idx = e.target.dataset.idx;\n      console.log(id); //2.创建url\n\n      var url = \"http://127.0.0.1:3000/removeItem\";\n      var postData = this.qs.stringify({\n        id: id\n      }); //3.发送ajax请求\n\n      this.axios.post(url, postData).then(function (result) {\n        if (result.data.code == 1) {\n          //删除对应数据中值\n          //1:获取下标\n          //2:依据下标删除指定数组商品\n          //删除数组中对应下标商品\n          //splice(数组下标,个数)\n          _this2.list.splice(idx, 1);\n\n          Toast(\"删除成功\");\n        } else {\n          Toast(\"删除失败\");\n        }\n      }); //4.获取返回结果\n      //5.提示删除结果\n      //6.list对应商品项删除?\n    },\n    //加载当前用户购物车列表\n    loadMore: function loadMore() {\n      var _this3 = this;\n\n      //1.创建url地址\n      var url = \"http://127.0.0.1:3000/getShopCart\"; //2.发送ajax请求\n\n      this.axios.get(url).then(function (result) {\n        //?3.获取返回数据\n        //console.log(result.data.data);\n        //?4.保存list\n        //this.list=result.data.data;\n        //console.log(this.list);\n        //?5.循环显示\n        //新添加功能:复选状态\n        //6.获取返回数组\n        var rows = result.data.data; //7.为数组中每个对象添加属性cb初始值false\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = rows[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var item = _step4.value;\n            item.cb = false;\n          } //8.将数据保存list中\n\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        _this3.list = rows; //console.log(this.list);\n      });\n    }\n  } //选中某个商品 * 将对应数组对象cb=true\n  //             清空将对应数组对象cb=false\n\n};",{"version":3,"sources":["ShopCart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"app-shopcart\">\r\n        <!-- \r\n            1.添加card.html卡片\r\n            2.添加媒体头目\r\n            3.发送请求获取购物车列表\r\n            4.保存显示\r\n         -->\r\n         <div class=\"mui-card\">\r\n            <div class=\"mui-card-header\">          \r\n                <!-- \r\n                    1.添加复选框\r\n                    2.为复选框绑定点击事件\r\n                    3.如果选中状态 所有商品选中\r\n                    4.如果清除状态 所有商品清除\r\n                 -->\r\n                <div>\r\n                全选\r\n                <input type=\"checkbox\" @click=\"selectAll\" :checked=\"allcb\">\r\n                </div>\r\n            </div>\r\n            <div class=\"mui-card-content\">\r\n                <div class=\"mui-card-content-inner\">\r\n                    <!--商品信息开始  -->\r\n                    <ul class=\"mui-table-view\">\r\n                        <li v-for=\"(item,i) of list\" class=\"mui-table-view-cell mui-media\" :key=\"item.id\">\r\n                            <a href=\"javascript:;\">\r\n                                <img class=\"mui-media-object mui-pull-left\" src=\"\">\r\n                                <div class=\"mui-media-body\">\r\n                                    <p class='mui-ellipsis'>\r\n                                        <!-- 商品前复选框 -->\r\n                                        <input type=\"checkbox\" :data-id=\"item.id\" :checked=\"item.cb\" @click=\"modifyItem\" :data-i=\"i\">\r\n                                        <!--  -->\r\n                                        {{item.pname}}\r\n                                        {{item.price}}\r\n                                        <input type=\"button\" value=\"删除\" :data-id=\"item.id\"      :data-idx=\"i\" @click=\"removeItem\"/>\r\n                                    </p>\r\n                                </div>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                <!--商品信息结束  -->\r\n                </div>\r\n            </div>\r\n            <div class=\"mui-card-footer\">\r\n                <input type=\"button\" value=\"删除选中商品\" @click=\"delItem\">\r\n            </div>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {Toast} from \"mint-ui\"\r\nexport default {\r\n    data(){\r\n        return {\r\n            list:[], //购物车列表\r\n            allcb:false  //全选的状态 默认是未选中false\r\n        }\r\n    },\r\n    created() {\r\n        this.loadMore();\r\n    },\r\n    methods: {\r\n        //全选按钮\r\n        selectAll(e){\r\n            //console.log(123);\r\n            //1.获取全选按钮选中状态\r\n            var rs=e.target.checked;\r\n            //2:遍历数据所有元素\r\n            for(var item of this.list){\r\n                item.cb=rs;\r\n            }\r\n            //3.item.cb = 全选状态\r\n            //4 修改全选框的状态\r\n            item.allcb= rs;\r\n        },\r\n            //1:当前购物车商品内容前添加复选框\r\n            //2:为复选框添加自定义属性id\r\n            //3:cart-footer 添加按钮 删除指定商品\r\n            //4:为按钮绑定时间获取选中商品id \"4,6,8\"\r\n        //修改复选框状态 选中 取消\r\n        modifyItem(e){\r\n            //1:获取当前元素选中状态 true  false\r\n            var rs = e.target.checked;\r\n            //console.log(rs)\r\n            //2:当前元素在数组中下标\r\n            var i = e.target.dataset.i;\r\n            //console.log(rs+\":\"+i);\r\n            //3.将状态赋值当前数组下标中对象cb值\r\n            this.list[i].cb = rs;\r\n            //console.log(this.list);\r\n            //判断全选复选框状态  true false\r\n            //1.获取数组个数\r\n            var size1=this.list.length;\r\n            //console.log(list);\r\n            //2.计算数组中cb true 元素个数\r\n            var count = 0;\r\n            for(var item of this.list){\r\n                if(item.cb){\r\n                    count++;\r\n                }\r\n            }\r\n            //console.log(size1+\":\"+count);\r\n            //3.数组个数==撤吧true 个数 [累加和]\r\n            if( size1 == count){\r\n                this.allcb = true;\r\n            }else{\r\n                this.allcb = false;\r\n            }\r\n            //4. 将allcb = true\r\n            //5. 否则allcb==false\r\n        },\r\n        //删除选中多个商品\r\n        delItem(){\r\n            //[{cb:true,id:1},{cb:true,id:3}]\r\n            //\"1,3\"\r\n            //1:创建空字符串\r\n            var html=\"\"; \r\n            //2:遍历数据中元素\r\n            for(var item of this.list){\r\n            //3:判断cb==true\r\n                if(item.cb){\r\n            //4:保存id拼接字符串 \"1,6,7\"\r\n                    html+=item.id+\",\"\r\n                }\r\n            }\r\n            //console.log(\"|\"+html+\"|\");\r\n            //return\r\n            if(html.length==0){\r\n                Toast(\"请选中你需要删除的商品\");\r\n                return;\r\n            }\r\n            //5:截取字符串去除最后,  \"1,6,7\"\r\n            //substring(?,?)\r\n            //?截取起始下标\r\n            //?截取几个字符\r\n            html=html.substring(0,html.length-1);\r\n            console.log(html);\r\n            //6:发送ajax ids=1,6,7\r\n            var url=\"http://127.0.0.1:3000\";\r\n            url+=\"/removeMItem?ids=\"+html;\r\n            this.axios.get(url).then(result=>{\r\n                if(result.data.code==1){\r\n                    Toast(\"删除成功\");\r\n                    this.loadMore();\r\n                }else{\r\n                    Toast(\"删除失败\");\r\n                }\r\n            })\r\n            //7:获取返回数据提示  删除成功或失败\r\n        },\r\n        removeItem(e){\r\n            //1.获取购物车商品id\r\n           var id=e.target.dataset.id;\r\n           var idx=e.target.dataset.idx;\r\n           console.log(id);\r\n            //2.创建url\r\n            var url=\"http://127.0.0.1:3000/removeItem\";\r\n            var postData = this.qs.stringify({\r\n                id:id\r\n            });\r\n            //3.发送ajax请求\r\n            this.axios.post(url,postData).then(result=>{\r\n                if(result.data.code==1){\r\n                    //删除对应数据中值\r\n                    //1:获取下标\r\n                    //2:依据下标删除指定数组商品\r\n                    //删除数组中对应下标商品\r\n                    //splice(数组下标,个数)\r\n                    this.list.splice(idx,1);\r\n                    Toast(\"删除成功\");\r\n                }else{\r\n                    Toast(\"删除失败\");\r\n                }\r\n            })\r\n            //4.获取返回结果\r\n            //5.提示删除结果\r\n            //6.list对应商品项删除?\r\n        },\r\n        //加载当前用户购物车列表\r\n        loadMore(){\r\n            //1.创建url地址\r\n            var url=\"http://127.0.0.1:3000/getShopCart\";\r\n            //2.发送ajax请求\r\n            this.axios.get(url).then(result=>{\r\n            //?3.获取返回数据\r\n            //console.log(result.data.data);\r\n            //?4.保存list\r\n                //this.list=result.data.data;\r\n                //console.log(this.list);\r\n            //?5.循环显示\r\n            //新添加功能:复选状态\r\n            //6.获取返回数组\r\n            var rows= result.data.data;\r\n            //7.为数组中每个对象添加属性cb初始值false\r\n            for(var item of rows){\r\n                item.cb=false;\r\n            }\r\n            //8.将数据保存list中\r\n            this.list=rows;\r\n            //console.log(this.list);\r\n            });\r\n        }\r\n    }\r\n}\r\n//选中某个商品 * 将对应数组对象cb=true\r\n//             清空将对应数组对象cb=false\r\n</script>\r\n<style scoped>\r\n    \r\n</style>"],"sourceRoot":"src\\components\\home"}]}